{"version":3,"sources":["meteor://ðŸ’»app/client/main.js"],"names":[],"mappings":"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","file":"/client/main.js","sourcesContent":["//subscription, read access to collections\r\nMeteor.subscribe(\"chats\");\r\nMeteor.subscribe(\"users\");\r\n\r\n// set up the main template the the router will use to build pages\r\nRouter.configure({\r\n  layoutTemplate: 'ApplicationLayout'\r\n});\r\n// specify the top level route, the page users see when they arrive at the site\r\nRouter.route('/', function () {\r\n  console.log(\"rendering root /\");\r\n  this.render(\"navbar\", {to:\"header\"});\r\n  this.render(\"lobby_page\", {to:\"main\"});  \r\n});\r\n\r\n// specify a route that allows the current user to chat to another users\r\nRouter.route('/chat/:_id', function () {\r\n  // the user they want to chat to has id equal to \r\n  // the id sent in after /chat/... \r\n  var otherUserId = this.params._id;\r\n  // set id to other user\r\n  Session.set(\"otherUserId\", otherUserId);\r\n  //Save the id to the session\r\n  var id = Meteor.call(\"getChatId\", Meteor.userId(), otherUserId, function(err, res){\r\n    if(!err){\r\n      Session.set(\"chatId\", res);\r\n    }\r\n  });\r\n  this.render(\"navbar\", {to:\"header\"});\r\n  this.render(\"chat_page\", {to:\"main\"});  \r\n});\r\n\r\n///\r\n// helper functions \r\n/// \r\nTemplate.available_user_list.helpers({\r\n  users:function(){\r\n    return Meteor.users.find();\r\n  }\r\n})\r\nTemplate.available_user.helpers({\r\n  getUsername:function(userId){\r\n    user = Meteor.users.findOne({_id:userId});\r\n    return user.profile.username;\r\n  }, \r\n  isMyUser:function(userId){\r\n    if (userId == Meteor.userId()){\r\n      return true;\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n})\r\n\r\n\r\nTemplate.chat_page.helpers({\r\n  messages:function(){\r\n    Meteor.call(\"addMessages\", Session.get(\"chatId\"), function(err, res){\r\n      if(!err){ // all good\r\n        Session.set(\"messages\", res);\r\n      }\r\n    }); \r\n    return Session.get(\"messages\");\r\n  }, \r\n  other_user:function(){\r\n    var otherUser = Meteor.users.findOne({_id:Session.get(\"otherUserId\")});\r\n    if(otherUser){\r\n      return otherUser.profile.username;\r\n      console.log(\"other\");\r\n    }\r\n  },\r\n  avatar:function(){\r\n    var otherUser = Meteor.users.findOne({_id:Session.get(\"otherUserId\")});\r\n    if(otherUser){\r\n      return otherUser.profile.avatar;\r\n    }\r\n  }\r\n})\r\n\r\n///////\r\n//Events\r\n///////\r\n\r\nTemplate.chat_page.events({\r\n// this event fires when the user sends a message on the chat page\r\n  'submit .js-send-chat':function(event){\r\n    // stop the form from triggering a page reload\r\n    event.preventDefault();\r\n    // see if we can find a chat object in the database\r\n    // to which we'll add the message\r\n    if(!Meteor.user()){ // user not available\r\n        alert(\"You need to login first!\");\r\n      }\r\n    var chat = Chats.findOne({_id:Session.get(\"chatId\")});\r\n    if (chat){// ok - we have a chat to use\r\n      var msgs = chat.messages; // pull the messages property\r\n      if (!msgs){// no messages yet, create a new array\r\n        msgs = [];\r\n      }\r\n      // is a good idea to insert data straight from the form\r\n      // (i.e. the user) into the database?? certainly not. \r\n      // push adds the message to the end of the array\r\n      // adding username and avatar to message\r\n      msgs.push({text: event.target.chat.value, username: Meteor.user().profile.username, avatar: Meteor.user().profile.avatar});\r\n      // reset the form\r\n      event.target.chat.value = \"\";\r\n      // put the messages array onto the chat object\r\n      chat.messages = msgs;\r\n      // update the chat object in the database.\r\n      // Chats.update(chat._id, chat);\r\n      console.log(\"You add a doc!\");\r\n      Meteor.call(\"update\", chat._id, chat);\r\n    }\r\n  },\r\n  \"click .js-add-emoji\": function(event){\r\n    event.preventDefault();\r\n    var target, emoji;\r\n    target = event.currentTarget;\r\n    emoji = target.title; \r\n    console.log(emoji);\r\n    var before = $(\"input\").val();\r\n    var after = before + \" \" + emoji;\r\n    $(\"input\").val(after);\r\n  }\r\n})\r\n\r\n"]}