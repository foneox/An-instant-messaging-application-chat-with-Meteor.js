[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nDate = Package['es5-shim'].Date;\nparseInt = Package['es5-shim'].parseInt;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nMeteor = Package.meteor.Meteor;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nbabelHelpers = Package['babel-runtime'].babelHelpers;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAccounts = Package['accounts-base'].Accounts;\nAccountsServer = Package['accounts-base'].AccountsServer;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/collections.js                                                  //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n//collections                                                          //\nChats = new Mongo.Collection(\"chats\");                                 // 2\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/collections.js","sourceMap":{"version":3,"sources":["/lib/collections.js"],"names":[],"mappings":";;;;;;;;;AACA,KAAK,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,qC","file":"/lib/collections.js","sourcesContent":["//collections\r\nChats = new Mongo.Collection(\"chats\");\r\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/main.js                                                      //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nMeteor.startup(function () {                                           // 1\n  if (!Meteor.users.findOne()) {                                       // 2\n    for (var i = 1; i < 19; i++) {                                     // 3\n      var email = \"user\" + i + \"@test.com\";                            // 4\n      var username = \"user\" + i;                                       // 5\n      var avatar = \"ava\" + i + \".png\";                                 // 6\n      console.log(\"creating a user with password 'test123' and username/ email: \" + email);\n      Meteor.users.insert({ profile: { username: username, avatar: avatar }, emails: [{ address: email }], services: { password: { \"bcrypt\": \"$2a$10$I3erQ084OiyILTv8ybtQ4ON6wusgPbMZ6.P33zzSDei.BbDL.Q4EO\" } } });\n    }                                                                  //\n  }                                                                    //\n});                                                                    //\n                                                                       //\n// publish read access to collections                                  //\n// all visible docs                                                    //\nMeteor.publish(\"chats\", function () {                                  // 15\n  //func called when you want to access docs                           //\n  return Chats.find({                                                  // 16\n    $or: [{ user1Id: this.userId }, { user2Id: this.userId }]          // 17\n  });                                                                  //\n});                                                                    //\n                                                                       //\nMeteor.publish(\"users\", function () {                                  // 24\n  //func called when you want to access docs                           //\n  return Meteor.users.find();                                          // 25\n});                                                                    //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/main.js","sourceMap":{"version":3,"sources":["/server/main.js"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,CAAC,OAAO,CAAC,YAAY;AACvB,MAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAC;AAC1B,SAAK,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,EAAE,EAAC,CAAC,EAAE,EAAC;AACpB,UAAI,KAAK,GAAG,MAAM,GAAC,CAAC,GAAC,WAAW,CAAC;AACjC,UAAI,QAAQ,GAAG,MAAM,GAAC,CAAC,CAAC;AACxB,UAAI,MAAM,GAAG,KAAK,GAAC,CAAC,GAAC,MAAM;AAC3B,aAAO,CAAC,GAAG,CAAC,+DAA+D,GAAC,KAAK,CAAC,CAAC;AACnF,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAC,OAAO,EAAC,EAAC,QAAQ,EAAC,QAAQ,EAAE,MAAM,EAAC,MAAM,EAAC,EAAE,MAAM,EAAC,CAAC,EAAC,OAAO,EAAC,KAAK,EAAC,CAAC,EAAC,QAAQ,EAAC,EAAE,QAAQ,EAAC,EAAC,QAAQ,EAAG,8DAA8D,EAAC,EAAC,EAAC,CAAC,CAAC;KAC9L;GACF;CACF,CAAC,CAAC;;;;AAIL,MAAM,CAAC,OAAO,CAAC,OAAO,EAAC,YAAU;;AAC/B,SAAO,KAAK,CAAC,IAAI,CAAC;AAChB,OAAG,EAAE,CACH,EAAC,OAAO,EAAC,IAAI,CAAC,MAAM,EAAC,EACrB,EAAC,OAAO,EAAC,IAAI,CAAC,MAAM,EAAC,CACtB;GACF,CAAC,CAAC;CACJ,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,CAAC,OAAO,EAAC,YAAU;;AAC7B,SAAO,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;CAC9B,CAAC,CAAC,sE","file":"/server/main.js","sourcesContent":["Meteor.startup(function () {\r\n    if (!Meteor.users.findOne()){\r\n      for (var i=1;i<19;i++){\r\n        var email = \"user\"+i+\"@test.com\";\r\n        var username = \"user\"+i;\r\n        var avatar = \"ava\"+i+\".png\"\r\n        console.log(\"creating a user with password 'test123' and username/ email: \"+email);\r\n        Meteor.users.insert({profile:{username:username, avatar:avatar}, emails:[{address:email}],services:{ password:{\"bcrypt\" : \"$2a$10$I3erQ084OiyILTv8ybtQ4ON6wusgPbMZ6.P33zzSDei.BbDL.Q4EO\"}}});\r\n      }\r\n    } \r\n  });\r\n\r\n// publish read access to collections\r\n// all visible docs\r\nMeteor.publish(\"chats\",function(){ //func called when you want to access docs\r\n  return Chats.find({ \r\n    $or: [ \r\n      {user1Id:this.userId}, \r\n      {user2Id:this.userId}\r\n    ]\r\n  });\r\n});\r\n\r\nMeteor.publish(\"users\",function(){ //func called when you want to access docs\r\n    return Meteor.users.find();\r\n});\r\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// share/main.js                                                       //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nMeteor.methods({                                                       // 1\n  getChatId: function (user1Id, user2Id) {                             // 2\n    // find a chat that has two users that match current user id       //\n    // and the requested user id                                       //\n    var filter = { $or: [{ user1Id: Meteor.userId(), user2Id: user2Id }, { user2Id: Meteor.userId(), user1Id: user2Id }] };\n    var chat = Chats.findOne(filter);                                  // 9\n    if (!chat) {                                                       // 10\n      // no chat matching the filter - need to insert a new one        //\n      var chatId = Chats.insert({ user1Id: user1Id, user2Id: user2Id });\n      return chatId;                                                   // 12\n    }                                                                  //\n    // there is a chat going already - use that.                       //\n    return chat._id;                                                   // 15\n  },                                                                   //\n  // adding new messages                                               //\n  addMessages: function (chatId) {                                     // 18\n    console.log(\"addMessages method running!\");                        // 19\n    if (!this.userId) {                                                // 20\n      // we have a user                                                //\n      return; // give up                                               // 21\n    } else {                                                           //\n        var chat = Chats.findOne({ _id: chatId });                     // 24\n        if (chat) {                                                    // 25\n          return chat.messages;                                        // 26\n        }                                                              //\n      }                                                                //\n  },                                                                   //\n  //update messages                                                    //\n  update: function (chatId, chat) {                                    // 31\n    console.log(\"update method \");                                     // 32\n    Chats.update(chatId, chat);                                        // 33\n  }                                                                    //\n});                                                                    //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/share/main.js","sourceMap":{"version":3,"sources":["/share/main.js"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,CAAC,OAAO,CAAC;AACb,WAAS,EAAC,UAAS,OAAO,EAAE,OAAO,EAAC;;;AAGlC,QAAI,MAAM,GAAG,EAAC,GAAG,EAAC,CACR,EAAC,OAAO,EAAC,MAAM,CAAC,MAAM,EAAE,EAAE,OAAO,EAAC,OAAO,EAAC,EAC1C,EAAC,OAAO,EAAC,MAAM,CAAC,MAAM,EAAE,EAAE,OAAO,EAAC,OAAO,EAAC,CACzC,EAAC,CAAC;AACb,QAAI,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACjC,QAAI,CAAC,IAAI,EAAC;;AACR,UAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,EAAC,OAAO,EAAC,OAAO,EAAE,OAAO,EAAC,OAAO,EAAC,CAAC,CAAC;AAC9D,aAAO,MAAM,CAAC;KACf;;AAEC,WAAO,IAAI,CAAC,GAAG,CAAC;GACnB;;AAED,aAAW,EAAC,UAAS,MAAM,EAAC;AAC1B,WAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;AAC3C,QAAG,CAAC,IAAI,CAAC,MAAM,EAAC;;AACb,aAAO;KACT,MACG;AACF,YAAI,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,EAAC,GAAG,EAAC,MAAM,EAAC,CAAC,CAAC;AACvC,YAAG,IAAI,EAAC;AACN,iBAAO,IAAI,CAAC,QAAQ,CAAC;SACtB;OACF;GACF;;AAED,QAAM,EAAC,UAAS,MAAM,EAAE,IAAI,EAAC;AAC3B,WAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;AAC9B,SAAK,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;GAC5B;CACF,CAAC,uE","file":"/share/main.js","sourcesContent":["Meteor.methods({ \r\n  getChatId:function(user1Id, user2Id){\r\n    // find a chat that has two users that match current user id\r\n    // and the requested user id\r\n    var filter = {$or:[\r\n              {user1Id:Meteor.userId(), user2Id:user2Id}, \r\n              {user2Id:Meteor.userId(), user1Id:user2Id}\r\n              ]};\r\n    var chat = Chats.findOne(filter);\r\n    if (!chat){// no chat matching the filter - need to insert a new one\r\n      var chatId = Chats.insert({user1Id:user1Id, user2Id:user2Id});\r\n      return chatId;\r\n    }\r\n    // there is a chat going already - use that. \r\n      return chat._id;\r\n  },\r\n  // adding new messages\r\n  addMessages:function(chatId){\r\n    console.log(\"addMessages method running!\");\r\n    if(!this.userId){ // we have a user\r\n       return; // give up\r\n    }\r\n    else{\r\n      var chat = Chats.findOne({_id:chatId});\r\n      if(chat){\r\n        return chat.messages;\r\n      }\r\n    }\r\n  },\r\n  //update messages\r\n  update:function(chatId, chat){\r\n    console.log(\"update method \");\r\n    Chats.update(chatId, chat);\r\n  }\r\n})"]}}]